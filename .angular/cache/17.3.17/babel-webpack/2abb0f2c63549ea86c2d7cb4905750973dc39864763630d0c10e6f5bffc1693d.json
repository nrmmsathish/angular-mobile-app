{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nlet GamifiedOnboardingComponent = class GamifiedOnboardingComponent {\n  constructor(router) {\n    this.router = router;\n    this.playerLevel = 1;\n    this.currentXP = 150;\n    this.nextLevelXP = 500;\n    this.totalPoints = 0;\n    this.streak = 3;\n    this.tasks = [{\n      id: '1',\n      title: 'Complete Net Worth Assessment',\n      description: 'Tell us about your financial standing to get personalized advice',\n      icon: 'üè†',\n      points: 100,\n      completed: false,\n      difficulty: 'easy',\n      category: 'Profile Setup'\n    }, {\n      id: '2',\n      title: 'Risk Profile Questionnaire',\n      description: 'Discover your investment personality and risk tolerance',\n      icon: 'üìä',\n      points: 150,\n      completed: true,\n      difficulty: 'medium',\n      category: 'Assessment'\n    }, {\n      id: '3',\n      title: 'Knowledge Assessment',\n      description: 'Test your understanding of investment concepts',\n      icon: 'üß†',\n      points: 200,\n      completed: false,\n      difficulty: 'hard',\n      category: 'Learning'\n    }, {\n      id: '4',\n      title: 'Set Investment Goals',\n      description: 'Define your financial objectives and timeline',\n      icon: 'üéØ',\n      points: 120,\n      completed: false,\n      difficulty: 'medium',\n      category: 'Planning'\n    }, {\n      id: '5',\n      title: 'Account Verification',\n      description: 'Verify your identity to unlock all features',\n      icon: 'üîê',\n      points: 80,\n      completed: true,\n      difficulty: 'easy',\n      category: 'Security'\n    }, {\n      id: '6',\n      title: 'First Investment',\n      description: 'Make your first investment to start your journey',\n      icon: 'üíé',\n      points: 300,\n      completed: false,\n      difficulty: 'hard',\n      category: 'Action'\n    }];\n    this.achievements = [{\n      id: 'first_step',\n      title: 'First Steps',\n      description: 'Complete your first task',\n      icon: 'üë∂',\n      unlocked: true,\n      requirement: 'Complete any task'\n    }, {\n      id: 'risk_master',\n      title: 'Risk Master',\n      description: 'Complete risk assessment',\n      icon: 'üéØ',\n      unlocked: true,\n      requirement: 'Complete risk profile'\n    }, {\n      id: 'knowledge_seeker',\n      title: 'Knowledge Seeker',\n      description: 'Pass the knowledge assessment',\n      icon: 'üéì',\n      unlocked: false,\n      requirement: 'Score 80%+ in assessment'\n    }, {\n      id: 'goal_setter',\n      title: 'Goal Setter',\n      description: 'Set your investment goals',\n      icon: 'üèÜ',\n      unlocked: false,\n      requirement: 'Complete goal setting'\n    }];\n    this.showLevelUp = false;\n    this.showPointsAnimation = false;\n    this.animatedPoints = 0;\n  }\n  ngOnInit() {\n    this.calculateProgress();\n    this.startPointsAnimation();\n  }\n  ngOnDestroy() {\n    if (this.animationInterval) {\n      clearInterval(this.animationInterval);\n    }\n  }\n  calculateProgress() {\n    const completedTasks = this.tasks.filter(task => task.completed);\n    this.totalPoints = completedTasks.reduce((sum, task) => sum + task.points, 0);\n    this.currentXP = 150 + this.totalPoints;\n  }\n  startPointsAnimation() {\n    const targetPoints = this.totalPoints;\n    let currentPoints = 0;\n    const increment = Math.ceil(targetPoints / 50);\n    this.animationInterval = setInterval(() => {\n      currentPoints += increment;\n      if (currentPoints >= targetPoints) {\n        this.animatedPoints = targetPoints;\n        clearInterval(this.animationInterval);\n      } else {\n        this.animatedPoints = currentPoints;\n      }\n    }, 30);\n  }\n  get progressPercentage() {\n    return Math.min(this.currentXP / this.nextLevelXP * 100, 100);\n  }\n  get completedTasksCount() {\n    return this.tasks.filter(task => task.completed).length;\n  }\n  get totalTasksCount() {\n    return this.tasks.length;\n  }\n  completeTask(taskId) {\n    const task = this.tasks.find(t => t.id === taskId);\n    if (task && !task.completed) {\n      task.completed = true;\n      this.showPointsAnimation = true;\n      this.calculateProgress();\n      // Check for level up\n      if (this.currentXP >= this.nextLevelXP) {\n        this.levelUp();\n      }\n      // Hide animation after delay\n      setTimeout(() => {\n        this.showPointsAnimation = false;\n      }, 2000);\n      // Navigate to actual task\n      this.navigateToTask(task);\n    }\n  }\n  levelUp() {\n    this.playerLevel++;\n    this.nextLevelXP = this.nextLevelXP * 1.5;\n    this.showLevelUp = true;\n    setTimeout(() => {\n      this.showLevelUp = false;\n    }, 3000);\n  }\n  navigateToTask(task) {\n    // Navigate to appropriate task based on category\n    switch (task.category) {\n      case 'Profile Setup':\n        this.router.navigate(['/complete-forms']);\n        break;\n      case 'Assessment':\n        this.router.navigate(['/screener']);\n        break;\n      case 'Learning':\n        this.router.navigate(['/academy']);\n        break;\n      case 'Planning':\n        this.router.navigate(['/complete-forms']);\n        break;\n      case 'Security':\n        this.router.navigate(['/complete-forms']);\n        break;\n      case 'Action':\n        this.router.navigate(['/discover']);\n        break;\n      default:\n        console.log('Navigate to:', task.title);\n    }\n  }\n  getDifficultyColor(difficulty) {\n    switch (difficulty) {\n      case 'easy':\n        return '#4ade80';\n      case 'medium':\n        return '#f59e0b';\n      case 'hard':\n        return '#ef4444';\n      default:\n        return '#6b7280';\n    }\n  }\n  goBack() {\n    this.router.navigate(['/onboarding']);\n  }\n  claimReward(achievement) {\n    if (achievement.unlocked) {\n      console.log('Claiming reward for:', achievement.title);\n      // Add reward claiming logic here\n    }\n  }\n};\nGamifiedOnboardingComponent = __decorate([Component({\n  selector: 'app-gamified-onboarding',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './gamified-onboarding.component.html',\n  styleUrls: ['./gamified-onboarding.component.scss']\n})], GamifiedOnboardingComponent);\nexport { GamifiedOnboardingComponent };","map":{"version":3,"names":["Component","CommonModule","GamifiedOnboardingComponent","constructor","router","playerLevel","currentXP","nextLevelXP","totalPoints","streak","tasks","id","title","description","icon","points","completed","difficulty","category","achievements","unlocked","requirement","showLevelUp","showPointsAnimation","animatedPoints","ngOnInit","calculateProgress","startPointsAnimation","ngOnDestroy","animationInterval","clearInterval","completedTasks","filter","task","reduce","sum","targetPoints","currentPoints","increment","Math","ceil","setInterval","progressPercentage","min","completedTasksCount","length","totalTasksCount","completeTask","taskId","find","t","levelUp","setTimeout","navigateToTask","navigate","console","log","getDifficultyColor","goBack","claimReward","achievement","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["C:\\Users\\Administrator\\Videos\\Hackathon\\academy\\angular-mobile-app\\src\\app\\pages\\gamified-onboarding\\gamified-onboarding.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\n\r\ninterface Task {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  icon: string;\r\n  points: number;\r\n  completed: boolean;\r\n  difficulty: 'easy' | 'medium' | 'hard';\r\n  category: string;\r\n}\r\n\r\ninterface Achievement {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  icon: string;\r\n  unlocked: boolean;\r\n  requirement: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-gamified-onboarding',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './gamified-onboarding.component.html',\r\n  styleUrls: ['./gamified-onboarding.component.scss']\r\n})\r\nexport class GamifiedOnboardingComponent implements OnInit, OnDestroy {\r\n  playerLevel = 1;\r\n  currentXP = 150;\r\n  nextLevelXP = 500;\r\n  totalPoints = 0;\r\n  streak = 3;\r\n  \r\n  tasks: Task[] = [\r\n    {\r\n      id: '1',\r\n      title: 'Complete Net Worth Assessment',\r\n      description: 'Tell us about your financial standing to get personalized advice',\r\n      icon: 'üè†',\r\n      points: 100,\r\n      completed: false,\r\n      difficulty: 'easy',\r\n      category: 'Profile Setup'\r\n    },\r\n    {\r\n      id: '2',\r\n      title: 'Risk Profile Questionnaire',\r\n      description: 'Discover your investment personality and risk tolerance',\r\n      icon: 'üìä',\r\n      points: 150,\r\n      completed: true,\r\n      difficulty: 'medium',\r\n      category: 'Assessment'\r\n    },\r\n    {\r\n      id: '3',\r\n      title: 'Knowledge Assessment',\r\n      description: 'Test your understanding of investment concepts',\r\n      icon: 'üß†',\r\n      points: 200,\r\n      completed: false,\r\n      difficulty: 'hard',\r\n      category: 'Learning'\r\n    },\r\n    {\r\n      id: '4',\r\n      title: 'Set Investment Goals',\r\n      description: 'Define your financial objectives and timeline',\r\n      icon: 'üéØ',\r\n      points: 120,\r\n      completed: false,\r\n      difficulty: 'medium',\r\n      category: 'Planning'\r\n    },\r\n    {\r\n      id: '5',\r\n      title: 'Account Verification',\r\n      description: 'Verify your identity to unlock all features',\r\n      icon: 'üîê',\r\n      points: 80,\r\n      completed: true,\r\n      difficulty: 'easy',\r\n      category: 'Security'\r\n    },\r\n    {\r\n      id: '6',\r\n      title: 'First Investment',\r\n      description: 'Make your first investment to start your journey',\r\n      icon: 'üíé',\r\n      points: 300,\r\n      completed: false,\r\n      difficulty: 'hard',\r\n      category: 'Action'\r\n    }\r\n  ];\r\n\r\n  achievements: Achievement[] = [\r\n    {\r\n      id: 'first_step',\r\n      title: 'First Steps',\r\n      description: 'Complete your first task',\r\n      icon: 'üë∂',\r\n      unlocked: true,\r\n      requirement: 'Complete any task'\r\n    },\r\n    {\r\n      id: 'risk_master',\r\n      title: 'Risk Master',\r\n      description: 'Complete risk assessment',\r\n      icon: 'üéØ',\r\n      unlocked: true,\r\n      requirement: 'Complete risk profile'\r\n    },\r\n    {\r\n      id: 'knowledge_seeker',\r\n      title: 'Knowledge Seeker',\r\n      description: 'Pass the knowledge assessment',\r\n      icon: 'üéì',\r\n      unlocked: false,\r\n      requirement: 'Score 80%+ in assessment'\r\n    },\r\n    {\r\n      id: 'goal_setter',\r\n      title: 'Goal Setter',\r\n      description: 'Set your investment goals',\r\n      icon: 'üèÜ',\r\n      unlocked: false,\r\n      requirement: 'Complete goal setting'\r\n    }\r\n  ];\r\n\r\n  private animationInterval: any;\r\n  showLevelUp = false;\r\n  showPointsAnimation = false;\r\n  animatedPoints = 0;\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.calculateProgress();\r\n    this.startPointsAnimation();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.animationInterval) {\r\n      clearInterval(this.animationInterval);\r\n    }\r\n  }\r\n\r\n  calculateProgress() {\r\n    const completedTasks = this.tasks.filter(task => task.completed);\r\n    this.totalPoints = completedTasks.reduce((sum, task) => sum + task.points, 0);\r\n    this.currentXP = 150 + this.totalPoints;\r\n  }\r\n\r\n  startPointsAnimation() {\r\n    const targetPoints = this.totalPoints;\r\n    let currentPoints = 0;\r\n    const increment = Math.ceil(targetPoints / 50);\r\n    \r\n    this.animationInterval = setInterval(() => {\r\n      currentPoints += increment;\r\n      if (currentPoints >= targetPoints) {\r\n        this.animatedPoints = targetPoints;\r\n        clearInterval(this.animationInterval);\r\n      } else {\r\n        this.animatedPoints = currentPoints;\r\n      }\r\n    }, 30);\r\n  }\r\n\r\n  get progressPercentage(): number {\r\n    return Math.min((this.currentXP / this.nextLevelXP) * 100, 100);\r\n  }\r\n\r\n  get completedTasksCount(): number {\r\n    return this.tasks.filter(task => task.completed).length;\r\n  }\r\n\r\n  get totalTasksCount(): number {\r\n    return this.tasks.length;\r\n  }\r\n\r\n  completeTask(taskId: string) {\r\n    const task = this.tasks.find(t => t.id === taskId);\r\n    if (task && !task.completed) {\r\n      task.completed = true;\r\n      this.showPointsAnimation = true;\r\n      this.calculateProgress();\r\n      \r\n      // Check for level up\r\n      if (this.currentXP >= this.nextLevelXP) {\r\n        this.levelUp();\r\n      }\r\n\r\n      // Hide animation after delay\r\n      setTimeout(() => {\r\n        this.showPointsAnimation = false;\r\n      }, 2000);\r\n\r\n      // Navigate to actual task\r\n      this.navigateToTask(task);\r\n    }\r\n  }\r\n\r\n  levelUp() {\r\n    this.playerLevel++;\r\n    this.nextLevelXP = this.nextLevelXP * 1.5;\r\n    this.showLevelUp = true;\r\n    \r\n    setTimeout(() => {\r\n      this.showLevelUp = false;\r\n    }, 3000);\r\n  }\r\n\r\n  navigateToTask(task: Task) {\r\n    // Navigate to appropriate task based on category\r\n    switch (task.category) {\r\n      case 'Profile Setup':\r\n        this.router.navigate(['/complete-forms']);\r\n        break;\r\n      case 'Assessment':\r\n        this.router.navigate(['/screener']);\r\n        break;\r\n      case 'Learning':\r\n        this.router.navigate(['/academy']);\r\n        break;\r\n      case 'Planning':\r\n        this.router.navigate(['/complete-forms']);\r\n        break;\r\n      case 'Security':\r\n        this.router.navigate(['/complete-forms']);\r\n        break;\r\n      case 'Action':\r\n        this.router.navigate(['/discover']);\r\n        break;\r\n      default:\r\n        console.log('Navigate to:', task.title);\r\n    }\r\n  }\r\n\r\n  getDifficultyColor(difficulty: string): string {\r\n    switch (difficulty) {\r\n      case 'easy': return '#4ade80';\r\n      case 'medium': return '#f59e0b';\r\n      case 'hard': return '#ef4444';\r\n      default: return '#6b7280';\r\n    }\r\n  }\r\n\r\n  goBack() {\r\n    this.router.navigate(['/onboarding']);\r\n  }\r\n\r\n  claimReward(achievement: Achievement) {\r\n    if (achievement.unlocked) {\r\n      console.log('Claiming reward for:', achievement.title);\r\n      // Add reward claiming logic here\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}