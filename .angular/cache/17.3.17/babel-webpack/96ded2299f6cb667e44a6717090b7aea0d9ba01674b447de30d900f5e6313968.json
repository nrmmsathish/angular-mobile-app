{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class LoadingService {\n  constructor() {\n    this.loadingSubject = new BehaviorSubject(false);\n    this.loading$ = this.loadingSubject.asObservable();\n  }\n  show() {\n    this.loadingSubject.next(true);\n  }\n  hide() {\n    this.loadingSubject.next(false);\n  }\n  get isLoading() {\n    return this.loadingSubject.value;\n  }\n  static {\n    this.ɵfac = function LoadingService_Factory(t) {\n      return new (t || LoadingService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoadingService,\n      factory: LoadingService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","LoadingService","constructor","loadingSubject","loading$","asObservable","show","next","hide","isLoading","value","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Administrator\\Videos\\Hackathon\\academy\\angular-mobile-app\\src\\app\\services\\loading.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoadingService {\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n  public loading$: Observable<boolean> = this.loadingSubject.asObservable();\r\n\r\n  show() {\r\n    this.loadingSubject.next(true);\r\n  }\r\n\r\n  hide() {\r\n    this.loadingSubject.next(false);\r\n  }\r\n\r\n  get isLoading(): boolean {\r\n    return this.loadingSubject.value;\r\n  }\r\n}"],"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AAKlD,OAAM,MAAOC,cAAc;EAH3BC,YAAA;IAIU,KAAAC,cAAc,GAAG,IAAIH,eAAe,CAAU,KAAK,CAAC;IACrD,KAAAI,QAAQ,GAAwB,IAAI,CAACD,cAAc,CAACE,YAAY,EAAE;;EAEzEC,IAAIA,CAAA;IACF,IAAI,CAACH,cAAc,CAACI,IAAI,CAAC,IAAI,CAAC;EAChC;EAEAC,IAAIA,CAAA;IACF,IAAI,CAACL,cAAc,CAACI,IAAI,CAAC,KAAK,CAAC;EACjC;EAEA,IAAIE,SAASA,CAAA;IACX,OAAO,IAAI,CAACN,cAAc,CAACO,KAAK;EAClC;;;uBAdWT,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAU,OAAA,EAAdV,cAAc,CAAAW,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}